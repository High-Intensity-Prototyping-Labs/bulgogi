- There is nothing that the Python API can do that the engine cannot do.
- Python serves as a scripting interface for the engine, both in terms of configuring and building projects.
- The setup.py script:
        - Produces project.yaml and all .bul/** files localizing sources and headers.
        - Checks for any dependencies needed.
        - Applies patches/etc.
- The build.py script:
        - Calls the build engine to build the project.
        - Checks for any changes/updates to the underlying structure.

** Again, all of these operations are done _through_ the engine. There may be a CLI one day, but for now this will be a Python API.


Synopsis:

# setup.py 
import bulgogi as bul 

bul.new_project('My Project')
bul.set_version('v1.0.0')

# Option 1
bul.add_target('target1', bul.LIB)
bul.add_target('target2', bul.LIB)

bul.target('target2').add_dep('target1')

bul.target('target1').add_sources('MANTIS-ADCS/src/*.c')
bul.target('target1').add_headers('MANTIS-ADCS/inc/*.h')

bul.target('target2').add_sources('arduCAM/v3/source/*.cpp')
bul.target('target2').add_headers('arduCAM/v3/header/*.hpp')
# Opinion: Needlessly long/verbose.
...

# Option 2 
target1 = bul.add_target('target1', bul.LIB)
target2 = bul.add_target('target2', bul.LIB)

target2.add_dep(target1)

target1.add_sources('MANTIS-ADCS/src/*.c')
target1.add_headers('MANTIS-ADCS/inc/*.h')

target2.add_sources('arduCAM/v3/source/*.cpp')
target2.add_headers('arduCAM/v3/header/*.hpp')
# Opinion: Distracts the dev from the fact that it's the bulgogi engine that's doing the work.
...

# Option 3
bul.add_target('target1', bul.LIB)
bul.add_target('target2', bul.LIB)

bul.add_target_dep('target2', 'target1')

bul.add_sources('target1', 'MANTIS-ADCS/src/*.c')
bul.add_headers('target1', 'MANTIS-ADCS/inc/*.h')

bul.add_sources('target2', 'arduCAM/v3/source/*.cpp')
bul.add_headers('target2', 'arduCAM/v3/header/*.hpp')
# Opinion: More concise but remains bulgogi-centric.
...

# Option 3.5 
target1 = bul.add_target('target1', bul.LIB)
target2 = bul.add_target('target2', bul.LIB)

bul.add_target_dep(target2, target1)

bul.add_sources(target1, 'MANTIS-ADCS/src/*.c')
bul.add_headers(target1, 'MANTIS-ADCS/inc/*.h')

bul.add_sources(target2, 'arduCAM/v3/source/*.cpp')
bul.add_headers(target2, 'arduCAM/v3/header/*.hpp')

# Opinion: Similar to 3, but the target IDs are returned.
# Still elegant in the low-level sense, but prevents constant name-lookups.
# Refusing to accept name lookups also prevents linking targets which don't exist.

...
